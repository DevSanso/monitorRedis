[
    {"ClientList" : "client list"},
    {"InfoServer" : "info server"},
    {"InfoCpu" : "eval \\\"local cpu = redis.call('info', 'cpu');local n = redis.call('info', 'server'); local ret = {};ret[1] = string.match(n, 'uptime_in_seconds:(%d+)');ret[2]=cpu;return ret\\\" 0"},
    {"InfoStat":    "info stats" },
    {"InfoMemory" :"info memeory"},
    {"DbSize" : "eval \\\"redis.call('select',ARGV[1]); return redis.call('dbsize')\\\" 0 ?"},
    {"GetDbSizeSelf" : "dbsize"},
    {"InfoClients" : "info clients"},
    {"InfoCommandStats" : "info commandstats"},
    {"InfoKeySpace" : "info keyspace"},
    {"InfoReplication" : "info replication"},
    {"GetDatabaseCount":"config get databases"},
    {"GetLimitClientCount":"config get maxclients"},
    {"GetRedisLimitMemorySize" : "config get maxmemory"},
    {"GetClusterGenKeySlotSize":"cluster countkeysinslot"},
    {"GetClusterNodes" : "cluster nodes"},
    {"GetMemoryUsageFromKey" : "MEMORY USAGE ?"},
    {"GetAllConfig" : "config get *"},
    {"GetMemoryKeyUsage3000Range" : "eval \\\"local scan_val = redis.call('scan', ARGV[1], 'count', 3000);local ks = scan_val[2];local ks_usage = {};local idx = 1;local usage = 0; for k, value in pairs(ks) do local reply = redis.pcall('memory','usage', value); local expired = redis.call('ttl', value); ks_usage[idx] = {value, reply, expired };idx = idx + 1; end;  return {scan_val[1],ks_usage}\\\" 0 ? "}
]